"""MODULE.bazel for lhre-2026: Bazel module configuration and toolchain setup."""

module(name = "lhre-2026")

bazel_dep(name = "toolchains_arm_gnu", version = "1.1.0")
bazel_dep(name = "rules_cc", version = "0.2.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")

arm_toolchain = use_extension("@toolchains_arm_gnu//:extensions.bzl", "arm_toolchain")

arm_toolchain.arm_none_eabi(version = "13.2.1")
use_repo(arm_toolchain, "arm_none_eabi")
register_toolchains("@arm_none_eabi//toolchain:all")

bazel_dep(name = "rules_python", version = "1.5.3")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.13",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.13",
    requirements_lock = "//:requirements_lock.txt",
)

use_repo(pip, "pypi")

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "abb61a688167623088f8768cc9264798df6a9d10",
)

# Hermetic OpenOCD
openocd = use_extension("//tools/openocd:openocd.bzl", "openocd")
use_repo(openocd, "openocd")