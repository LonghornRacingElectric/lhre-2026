load("@rules_cc//cc:defs.bzl", "cc_binary")
load("//:tools/outputs/build_outputs.bzl", "binary_out", "hex_out")

cc_binary(
    name = "vcu_firmware_2026",
    srcs = glob(
        [
            "Core/Src/**/*.c",
            "Drivers/*HAL_Driver/**/*.c",
            "Middlewares/**/*.c",
            "USB_DEVICE/**/*.c",
            "Core/Inc/**/*.h",
            "Drivers/**/*.h",
            "Middlewares/**/*.h",
            "USB_DEVICE/**/*.h",
        ],

        allow_empty = True # allows empty globs, so the codebase can grow without refactoring
    ),

    includes = [
        "Core/Inc",
        "Drivers/STM32G4xx_HAL_Driver/Inc",
        "Drivers/STM32G4xx_HAL_Driver/Inc/Legacy",
        "Drivers/CMSIS/Device/ST/STM32G4xx/Include",
        "Drivers/CMSIS/Include",
        "USB_DEVICE/App",
        "USB_DEVICE/Target",
        "Middlewares/ST/STM32_USB_Device_Library/Core/Inc",
        "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc",
        "Middlewares/Third_Party/FreeRTOS/Source/include",
        "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2",
        "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F",
        "//longhorn-lib:longhorn_lib"
    ],

    # Linker options
    linkopts = [
        "-T $(location //toolchain:stm32g474vetx_flash_script)",
        "$(location //toolchain:stm32g474_startup)",
    ],

    # Defines for the C preprocessor
    defines = [
        "DEBUG",
        "USE_HAL_DRIVER",
        "STM32G474xx",
    ],

    additional_linker_inputs = [
        "//toolchain:stm32g474vetx_flash_script",
        "//toolchain:stm32g474_startup",
    ],

    # Target platform constraints
    target_compatible_with = [
        "@platforms//cpu:arm",
        "@platforms//os:none",
    ],

    visibility = ["//visibility:public"],
)

binary_out(
    name = "vcu_firmware_bin",
    src = ":vcu_firmware_2026"
)

hex_out(
    name = "vcu_firmare_hex",
    src = ":vcu_firmware_2026"
)